{"ast":null,"code":"import { ref } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from '@/axios';\nexport default {\n  __name: 'ResetPasswordPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n\n    // Get email and token from URL query parameters\n    const email = route.query.email;\n    const resetToken = route.query.token;\n    const password = ref('');\n    const confirmPassword = ref('');\n    const error = ref('');\n    const success = ref('');\n\n    // Function to handle the password reset form submission\n    const submitResetPassword = async () => {\n      error.value = ''; // Reset error message\n      success.value = ''; // Reset success message\n\n      // Simple form validation\n      if (!password.value || !confirmPassword.value) {\n        error.value = 'Please fill in all fields.';\n        return;\n      }\n      if (password.value !== confirmPassword.value) {\n        error.value = 'Passwords do not match.';\n        return;\n      }\n      console.log(resetToken);\n\n      // Send password reset request to the API\n      try {\n        const response = await axios.post('/reset-password', {\n          email: email,\n          password: password.value,\n          password_confirmation: confirmPassword.value,\n          token: resetToken\n        });\n        console.log(response);\n        success.value = 'Password reset successful.';\n      } catch (err) {\n        console.log(err);\n        error.value = err.response?.data;\n      }\n    };\n    const __returned__ = {\n      route,\n      email,\n      resetToken,\n      password,\n      confirmPassword,\n      error,\n      success,\n      submitResetPassword,\n      ref,\n      get useRoute() {\n        return useRoute;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","useRoute","axios","route","email","query","resetToken","token","password","confirmPassword","error","success","submitResetPassword","value","console","log","response","post","password_confirmation","err","data"],"sources":["/home/abd/www/zadaniya/infoservice/front/src/pages/ResetPasswordPage.vue"],"sourcesContent":["<template>\n  <div class=\"max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded\">\n    <h1 class=\"text-2xl font-bold mb-6 text-center\">Reset Password</h1>\n\n    <template>\n        \n      <!-- New Password Input -->\n      <div class=\"mb-4\">\n        <label for=\"password\" class=\"block text-sm font-medium text-gray-700\">New Password</label>\n      <input\n        type=\"password\"\n        v-model=\"password\"\n        id=\"password\"\n        class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n        placeholder=\"Enter your new password\"\n        />\n      </div>\n\n      <!-- Confirm Password Input -->\n    <div class=\"mb-4\">\n      <label for=\"confirmPassword\" class=\"block text-sm font-medium text-gray-700\">Confirm Password</label>\n      <input\n      type=\"password\"\n        v-model=\"confirmPassword\"\n        id=\"confirmPassword\"\n        class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n        placeholder=\"Confirm your new password\"\n        />\n      </div>\n      \n      <!-- Submit Button -->\n      <div>\n        <button\n        @click=\"submitResetPassword\"\n        class=\"w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\"\n        >\n        Reset Password\n      </button>\n    </div>\n    </template>\n\n    <p v-if=\"error\" class=\"text-red-500 mt-4\">{{ error }}</p>\n    <p v-if=\"success\" class=\"text-green-500 mt-4\">{{ success }}</p>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from '@/axios';\n\n\nconst route = useRoute();\n\n// Get email and token from URL query parameters\nconst email = route.query.email;\nconst resetToken = route.query.token;\n\nconst password = ref('');\nconst confirmPassword = ref('');\nconst error = ref('');\nconst success = ref('');\n\n// Function to handle the password reset form submission\nconst submitResetPassword = async () => {\n  error.value = '';  // Reset error message\n  success.value = '';  // Reset success message\n\n  // Simple form validation\n  if (!password.value || !confirmPassword.value) {\n    error.value = 'Please fill in all fields.';\n    return;\n  }\n  if (password.value !== confirmPassword.value) {\n    error.value = 'Passwords do not match.';\n    return;\n  }\n\n  console.log(resetToken);\n  \n  // Send password reset request to the API\n  try {\n    const response = await axios.post('/reset-password', {\n      email: email,\n      password: password.value,\n      password_confirmation: confirmPassword.value,\n      token: resetToken,\n    });\n    console.log(response);\n    success.value = 'Password reset successful.';\n  } catch (err) {\n    console.log(err);\n    \n    error.value = err.response?.data;\n  }\n};\n</script>\n\n"],"mappings":"AA+CA,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAOC,KAAK,MAAM,SAAS;;;;;;;IAG3B,MAAMC,KAAK,GAAGF,QAAQ,CAAC,CAAC;;IAExB;IACA,MAAMG,KAAK,GAAGD,KAAK,CAACE,KAAK,CAACD,KAAK;IAC/B,MAAME,UAAU,GAAGH,KAAK,CAACE,KAAK,CAACE,KAAK;IAEpC,MAAMC,QAAQ,GAAGR,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMS,eAAe,GAAGT,GAAG,CAAC,EAAE,CAAC;IAC/B,MAAMU,KAAK,GAAGV,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMW,OAAO,GAAGX,GAAG,CAAC,EAAE,CAAC;;IAEvB;IACA,MAAMY,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtCF,KAAK,CAACG,KAAK,GAAG,EAAE,CAAC,CAAE;MACnBF,OAAO,CAACE,KAAK,GAAG,EAAE,CAAC,CAAE;;MAErB;MACA,IAAI,CAACL,QAAQ,CAACK,KAAK,IAAI,CAACJ,eAAe,CAACI,KAAK,EAAE;QAC7CH,KAAK,CAACG,KAAK,GAAG,4BAA4B;QAC1C;MACF;MACA,IAAIL,QAAQ,CAACK,KAAK,KAAKJ,eAAe,CAACI,KAAK,EAAE;QAC5CH,KAAK,CAACG,KAAK,GAAG,yBAAyB;QACvC;MACF;MAEAC,OAAO,CAACC,GAAG,CAACT,UAAU,CAAC;;MAEvB;MACA,IAAI;QACF,MAAMU,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAC,iBAAiB,EAAE;UACnDb,KAAK,EAAEA,KAAK;UACZI,QAAQ,EAAEA,QAAQ,CAACK,KAAK;UACxBK,qBAAqB,EAAET,eAAe,CAACI,KAAK;UAC5CN,KAAK,EAAED;QACT,CAAC,CAAC;QACFQ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;QACrBL,OAAO,CAACE,KAAK,GAAG,4BAA4B;MAC9C,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZL,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;QAEhBT,KAAK,CAACG,KAAK,GAAGM,GAAG,CAACH,QAAQ,EAAEI,IAAI;MAClC;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}