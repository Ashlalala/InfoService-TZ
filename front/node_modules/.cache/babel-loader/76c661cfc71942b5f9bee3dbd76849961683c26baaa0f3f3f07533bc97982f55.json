{"ast":null,"code":"import axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Function to fetch CSRF cookie\nasync function fetchCsrfCookie() {\n  try {\n    await axios.get('http://localhost:8000/sanctum/csrf-cookie', {\n      withCredentials: true // Enable cookies for cross-site requests\n    });\n  } catch (error) {\n    console.error('Error fetching CSRF cookie:', error);\n  }\n}\ninstance.interceptors.request.use(async config => {\n  if (config.method !== 'get') {\n    await fetchCsrfCookie(); // Fetch CSRF cookie before sending the request\n  }\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor\ninstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle errors globally\n  if (error.response && error.response.status === 401) {\n    // Handle unauthorized access, maybe redirect to login\n    // window.location.href = '/login'; // or use Vue Router\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","timeout","headers","fetchCsrfCookie","get","withCredentials","error","console","interceptors","request","use","config","method","token","localStorage","getItem","Promise","reject","response","status"],"sources":["/home/abd/www/zadaniya/infoservice/front/src/axios.js"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\n// Function to fetch CSRF cookie\nasync function fetchCsrfCookie() {\n  try {\n    await axios.get('http://localhost:8000/sanctum/csrf-cookie', {\n      withCredentials: true, // Enable cookies for cross-site requests\n    });\n  } catch (error) {\n    console.error('Error fetching CSRF cookie:', error);\n  }\n}\n\ninstance.interceptors.request.use(async config => {\n  if (config.method !== 'get') {\n    await fetchCsrfCookie(); // Fetch CSRF cookie before sending the request\n  }\n\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor\ninstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle errors globally\n  if (error.response && error.response.status === 401) {\n    // Handle unauthorized access, maybe redirect to login\n    // window.location.href = '/login'; // or use Vue Router\n  }\n  return Promise.reject(error);\n});\n\nexport default instance;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,eAAeC,eAAeA,CAAA,EAAG;EAC/B,IAAI;IACF,MAAMN,KAAK,CAACO,GAAG,CAAC,2CAA2C,EAAE;MAC3DC,eAAe,EAAE,IAAI,CAAE;IACzB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF;AAEAR,QAAQ,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAMC,MAAM,IAAI;EAChD,IAAIA,MAAM,CAACC,MAAM,KAAK,KAAK,EAAE;IAC3B,MAAMT,eAAe,CAAC,CAAC,CAAC,CAAC;EAC3B;EAEA,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTF,MAAM,CAACT,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUW,KAAK,EAAE;EACrD;EACA,OAAOF,MAAM;AACf,CAAC,EAAEL,KAAK,IAAI;EACV,OAAOU,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACAR,QAAQ,CAACU,YAAY,CAACU,QAAQ,CAACR,GAAG,CAACQ,QAAQ,IAAI;EAC7C,OAAOA,QAAQ;AACjB,CAAC,EAAEZ,KAAK,IAAI;EACV;EACA,IAAIA,KAAK,CAACY,QAAQ,IAAIZ,KAAK,CAACY,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACA;EAAA;EAEF,OAAOH,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAeR,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}