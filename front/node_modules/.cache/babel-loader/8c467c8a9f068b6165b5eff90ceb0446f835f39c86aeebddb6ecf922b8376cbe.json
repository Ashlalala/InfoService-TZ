{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded\"\n};\nconst _hoisted_2 = {\n  class: \"mb-4\"\n};\nconst _hoisted_3 = {\n  class: \"mb-4\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"text-red-500 mt-4\"\n};\nconst _hoisted_5 = {\n  key: 1,\n  class: \"text-green-500 mt-4\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createTextVNode(\" templ \")), _cache[5] || (_cache[5] = _createElementVNode(\"h1\", {\n    class: \"text-2xl font-bold mb-6 text-center\"\n  }, \"Reset Password\", -1 /* HOISTED */)), _createCommentVNode(\" New Password Input \"), _createElementVNode(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", {\n    for: \"password\",\n    class: \"block text-sm font-medium text-gray-700\"\n  }, \"New Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.password = $event),\n    id: \"password\",\n    class: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\",\n    placeholder: \"Enter your new password\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.password]])]), _createCommentVNode(\" Confirm Password Input \"), _createElementVNode(\"div\", _hoisted_3, [_cache[3] || (_cache[3] = _createElementVNode(\"label\", {\n    for: \"confirmPassword\",\n    class: \"block text-sm font-medium text-gray-700\"\n  }, \"Confirm Password\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.confirmPassword = $event),\n    id: \"confirmPassword\",\n    class: \"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\",\n    placeholder: \"Confirm your new password\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.confirmPassword]])]), _createCommentVNode(\" Submit Button \"), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: $setup.submitResetPassword,\n    class: \"w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\"\n  }, \" Reset Password \")]), $setup.error ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $setup.success ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, _toDisplayString($setup.success), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createTextVNode","_createElementVNode","_createCommentVNode","_hoisted_2","for","type","_cache","$event","$setup","password","id","placeholder","_hoisted_3","confirmPassword","onClick","submitResetPassword","error","_hoisted_4","_toDisplayString","success","_hoisted_5"],"sources":["/home/abd/www/zadaniya/infoservice/front/src/pages/ResetPasswordPage.vue"],"sourcesContent":["<template>\n  <div class=\"max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded\">\n    templ\n    <h1 class=\"text-2xl font-bold mb-6 text-center\">Reset Password</h1>\n\n    <!-- New Password Input -->\n    <div class=\"mb-4\">\n      <label for=\"password\" class=\"block text-sm font-medium text-gray-700\">New Password</label>\n      <input\n        type=\"password\"\n        v-model=\"password\"\n        id=\"password\"\n        class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n        placeholder=\"Enter your new password\"\n      />\n    </div>\n\n    <!-- Confirm Password Input -->\n    <div class=\"mb-4\">\n      <label for=\"confirmPassword\" class=\"block text-sm font-medium text-gray-700\">Confirm Password</label>\n      <input\n        type=\"password\"\n        v-model=\"confirmPassword\"\n        id=\"confirmPassword\"\n        class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm\"\n        placeholder=\"Confirm your new password\"\n      />\n    </div>\n\n    <!-- Submit Button -->\n    <div>\n      <button\n        @click=\"submitResetPassword\"\n        class=\"w-full bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50\"\n      >\n        Reset Password\n      </button>\n    </div>\n\n    <p v-if=\"error\" class=\"text-red-500 mt-4\">{{ error }}</p>\n    <p v-if=\"success\" class=\"text-green-500 mt-4\">{{ success }}</p>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useRoute } from 'vue-router';\nimport axios from '@/axios';\n\n\nconst route = useRoute();\n\n// Get email and token from URL query parameters\nconst email = route.query.email;\nconst resetToken = route.query.token;\n\nconst password = ref('');\nconst confirmPassword = ref('');\nconst error = ref('');\nconst success = ref('');\n\n// Function to handle the password reset form submission\nconst submitResetPassword = async () => {\n  error.value = '';  // Reset error message\n  success.value = '';  // Reset success message\n\n  // Simple form validation\n  if (!password.value || !confirmPassword.value) {\n    error.value = 'Please fill in all fields.';\n    return;\n  }\n  if (password.value !== confirmPassword.value) {\n    error.value = 'Passwords do not match.';\n    return;\n  }\n\n  console.log(resetToken);\n  \n  // Send password reset request to the API\n  try {\n    const response = await axios.post('/reset-password', {\n      email: email,\n      password: password.value,\n      password_confirmation: confirmPassword.value,\n      token: resetToken,\n    });\n    console.log(response);\n    success.value = 'Password reset successful.';\n  } catch (err) {\n    console.log(err);\n    \n    error.value = err.response?.data;\n  }\n};\n</script>\n\n"],"mappings":";;EACOA,KAAK,EAAC;AAAuD;;EAK3DA,KAAK,EAAC;AAAM;;EAYZA,KAAK,EAAC;AAAM;;EAlBrBC,GAAA;EAuCoBD,KAAK,EAAC;;;EAvC1BC,GAAA;EAwCsBD,KAAK,EAAC;;;uBAvC1BE,mBAAA,CAwCM,OAxCNC,UAwCM,G,0BAzCRC,gBAAA,CACqE,SAEjE,I,0BAAAC,mBAAA,CAAmE;IAA/DL,KAAK,EAAC;EAAqC,GAAC,gBAAc,sBAE9DM,mBAAA,wBAA2B,EAC3BD,mBAAA,CASM,OATNE,UASM,G,0BARJF,mBAAA,CAA0F;IAAnFG,GAAG,EAAC,UAAU;IAACR,KAAK,EAAC;KAA0C,cAAY,sB,gBAClFK,mBAAA,CAME;IALAI,IAAI,EAAC,UAAU;IATvB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAUiBC,MAAA,CAAAC,QAAQ,GAAAF,MAAA;IACjBG,EAAE,EAAC,UAAU;IACbd,KAAK,EAAC,iJAAiJ;IACvJe,WAAW,EAAC;iDAHHH,MAAA,CAAAC,QAAQ,E,KAOrBP,mBAAA,4BAA+B,EAC/BD,mBAAA,CASM,OATNW,UASM,G,0BARJX,mBAAA,CAAqG;IAA9FG,GAAG,EAAC,iBAAiB;IAACR,KAAK,EAAC;KAA0C,kBAAgB,sB,gBAC7FK,mBAAA,CAME;IALAI,IAAI,EAAC,UAAU;IArBvB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAsBiBC,MAAA,CAAAK,eAAe,GAAAN,MAAA;IACxBG,EAAE,EAAC,iBAAiB;IACpBd,KAAK,EAAC,iJAAiJ;IACvJe,WAAW,EAAC;iDAHHH,MAAA,CAAAK,eAAe,E,KAO5BX,mBAAA,mBAAsB,EACtBD,mBAAA,CAOM,cANJA,mBAAA,CAKS;IAJNa,OAAK,EAAEN,MAAA,CAAAO,mBAAmB;IAC3BnB,KAAK,EAAC;KACP,kBAED,E,GAGOY,MAAA,CAAAQ,KAAK,I,cAAdlB,mBAAA,CAAyD,KAAzDmB,UAAyD,EAAAC,gBAAA,CAAZV,MAAA,CAAAQ,KAAK,oBAvCtDd,mBAAA,gBAwCaM,MAAA,CAAAW,OAAO,I,cAAhBrB,mBAAA,CAA+D,KAA/DsB,UAA+D,EAAAF,gBAAA,CAAdV,MAAA,CAAAW,OAAO,oBAxC5DjB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}